import java.util.*;
class Edge implements Comparable<Edge> {
	public int vex;
	public int cost;
	Edge(int vex, int cost){
		this.vex = vex;
		this.cost = cost;
	}
	@Override
	public int compareTo(Edge ob) {
		return this.cost - ob.cost;
	}
}


class Main {
	static int[] unf;
	
	public static int Find(int v) {
		if(v==unf[v]) return v;
		else return unf[v]=Find(unf[v]);
	}
	public static void Union(int a, int b) {
		int fa = Find(a);
		int fb = Find(b);
		if(fa!=fb) unf[fa] = fb;
	}
	
	public static void main(String[] args){
		Main T = new Main();
		Scanner sc = new Scanner(System.in);
		int v = sc.nextInt(); 
		int e = sc.nextInt();
		ArrayList<ArrayList<Edge>> graph = new ArrayList<ArrayList<Edge>>();
		for(int i=0; i<=v; i++) {
			graph.add(new ArrayList<Edge>());
		}
		int[] ch = new int[v+1];
		for(int i=0; i<e; i++) {
			int a = sc.nextInt();
			int b = sc.nextInt();
			int c = sc.nextInt();
			graph.get(a).add(new Edge(b,c));
			graph.get(b).add(new Edge(a,c));
		}
		int answer = 0;
		PriorityQueue<Edge> pQ = new PriorityQueue<>();
		pQ.offer(new Edge(1,0));
		while(!pQ.isEmpty()) {
			Edge tmp = pQ.poll();
			int ev = tmp.vex;
			if(ch[ev]==0) {
				ch[ev] = 1;
				answer += tmp.cost;
				for(Edge ob : graph.get(ev)) {
					if(ch[ob.vex]==0) pQ.offer(new Edge(ob.vex, ob.cost));
				}
			}
		}
		
		System.out.println(answer);
	}
}
